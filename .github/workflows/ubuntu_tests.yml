name: Ubuntu tests

on:
  push:
  pull_request:

jobs:
  skip:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skip job"

  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "not contains '[skip ci]'"

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          #- macOS-latest
        nim_version:
          - '1.2.0'
          - 'stable'
    needs: before
    env:
      TIMEOUT_EXIT_STATUS: 124
    steps:
      - uses: actions/checkout@v1
      - name: Cache nimble
        id: cache-nimble
        uses: actions/cache@v1
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-${{ hashFiles('*.nimble') }}
        if: runner.os == 'Linux'
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim_version }}

      - name: Fix apt packages
        run: |
          # see. https://github.com/actions/virtual-environments/issues/675
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt update -yqq
        if: runner.os == 'Linux'

      - name: Install xvfb
        run: sudo apt install -y xvfb
        if: runner.os == 'Linux'

      - name: Install sdl2 on Ubuntu
        run: sudo apt install --fix-missing -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        if: runner.os == 'Linux'

      - name: Install sdl2 on Windows
        run: |
          from urllib import request
          import os

          lists = [
            ("https://www.libsdl.org/release/%s.zip", "SDL2-2.0.12-win32-x64"),
            ("https://www.libsdl.org/projects/SDL_mixer/release/%s.zip", "SDL2_mixer-2.0.4-win32-x64"),
            ("https://www.libsdl.org/projects/SDL_image/release/%s.zip", "SDL2_image-2.0.5-win32-x64"),
            ("https://www.libsdl.org/projects/SDL_ttf/release/%s.zip", "SDL2_ttf-2.0.15-win32-x64"),
          ]
          for elem in lists:
            url = elem[0] % elem[1]
            file = "%s.zip" % elem[1]
            request.urlretrieve(url, file)
            os.system("7z x -y %s" % file)
        shell: python
        if: runner.os == 'Windows'

      - name: Build tests on Ubuntu
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "test: $file"
            nim c $file
            timeout 2 xvfb-run --auto-servernum --server-num=1 ./${file%%.nim} || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          done
        shell: bash
        if: runner.os == 'Linux'

      - name: Build tests on Windows
        run: |
          cp *.dll tests/
          cd tests
          # FIXME:
          # for file in $(ls -v test*.nim); do
          #   echo "test: $file"
          #   nim c $file
          #   timeout 2 ./${file%%.nim} || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          # done
          nim c test1.nim; timeout 2 ./test1 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test2.nim; timeout 2 ./test2 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test3.nim; timeout 2 ./test3 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test4.nim; timeout 2 ./test4 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test5.nim; timeout 2 ./test5 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test6.nim; timeout 2 ./test6 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test7.nim; timeout 2 ./test7 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test8.nim; timeout 2 ./test8 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test9.nim; timeout 2 ./test9 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test10.nim; timeout 2 ./test10 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          #nim c test11.nim; timeout 2 ./test11 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          #nim c test12.nim; timeout 2 ./test12 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          #nim c test13.nim; timeout 2 ./test13 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test14.nim; timeout 2 ./test14 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test15.nim; timeout 2 ./test15 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test16.nim; timeout 2 ./test16 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test17.nim; timeout 2 ./test17 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test18.nim; timeout 2 ./test18 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          #nim c test19.nim; timeout 2 ./test19 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test20.nim; timeout 2 ./test20 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test21.nim; timeout 2 ./test21 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          nim c test22.nim; timeout 2 ./test22 || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
        shell: bash
        if: runner.os == 'Windows'
